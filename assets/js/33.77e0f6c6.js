(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{358:function(t,e,r){"use strict";r.r(e);var a=r(5),i=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("目前市面上很多文章一大抄，在如今 ES202+ 的年代，还在摘抄着 ES3 的原文。")]),t._v(" "),e("blockquote",[e("p",[t._v("Every execution context has associated with it a variable object.\nVariables and functions declared in the source text are added as properties of the variable object.\nFor function code, parameters are added as properties of the variable object.")])]),t._v(" "),e("p",[t._v("其实在书面理解上沿用活跃对象的概念没什么问题，但是照抄原文又不指明出处，就会让人误以为如今的规范中也还定义了活跃对象这一概念。\n其实上引文中包含了活跃对象（Activation Object, AO，有时也称活动对象、激活对象）与可变对象（Variable Object, VO，有时也称变量对象）的内容，\n摘抄自 ECMAScript 3 Spec 的两处并组装起来。")]),t._v(" "),e("h2",{attrs:{id:"ecmascript-1-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-1-3"}},[t._v("#")]),t._v(" ECMAScript 1 / 3")]),t._v(" "),e("p",[t._v("摘自：ECMAScript Language Specification 262 Edition 3 Final, 10.1.6 活跃对象")]),t._v(" "),e("blockquote",[e("p",[t._v("在 ECMAScript 1 和 ECMAScript 3 中，的确是有着关于活跃对象的定义。")]),t._v(" "),e("p",[t._v("当控制进入函数代码的执行上下文时，创建一个活动对象并将它与该执行上下文相关联， 并使用一个名为 arguments、特征为 {DontDelete} 的属性初始化该对象。该属性的初始值是稍后将要描述的一个参数对象。")]),t._v(" "),e("p",[t._v("接下来，这个活动对象将被用作变量初始化的可变对象。")]),t._v(" "),e("p",[t._v("活动对象纯粹是一种规范性机制，在 ECMAScript 访问它是不可能的。只能访问其成员而非该活动对象本身。对一个基对象为活动对象的引用值应用调用运算符时，这次调用的 this 值 为 null。")])]),t._v(" "),e("p",[t._v("但也仅限于 ECMAScript 1 和 3 了。我们现在在网上（尤其是中文搜索环境中）获取到的关于活跃对象（Activation Object）和可变对象（Variable Object）的文章，大多都是为我们描述的 ECMAScript 1 和 3，早已过时。")]),t._v(" "),e("h2",{attrs:{id:"ecmascript-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-5"}},[t._v("#")]),t._v(" ECMAScript 5+")]),t._v(" "),e("p",[t._v("在 ES5 及之后的 ES 版本，已经不存在活跃对象（AO）及一系列周边内容的概念了。取而代之，是一个叫词法环境（Lexical Environments）的定义。")]),t._v(" "),e("p",[t._v("也就是说，严谨来讲，现代的 "),e("code",[t._v("ECMAScript")]),t._v(" 早已没有了活跃对象这一概念。")]),t._v(" "),e("h2",{attrs:{id:"广义的活跃对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#广义的活跃对象"}},[t._v("#")]),t._v(" 广义的活跃对象")]),t._v(" "),e("p",[t._v("经过上面两节内容，我们可以知道，活跃对象是 "),e("code",[t._v("ECMAScript 1 / 3")]),t._v(" 中的内容。后续的版本中，其就不复存在了。但是活跃对象这个概念就不能再被提起了吗？")]),t._v(" "),e("p",[t._v("其实也不是，它对应的概念还是可以延续下来的。只不过不能让人误以为现代 ECMAScript 中还有其定义，我们现在再聊起活跃对象时，应该知道它只是广义的抽象，\n而不再是狭义的定义了。广义的活跃对象在不同的场景下也可以有不同的名字，如活跃记录（Activation Record）、栈帧（Stack Frame）等。")]),t._v(" "),e("p",[t._v("每当函数被调用的时候，其都会创建一个活跃对象。该对象对开发者不可见，是一个隐藏的数据结构，其中包含了一些函数在执行时必要的信息和绑定，以及返回值的地址等等。")]),t._v(" "),e("p",[t._v("JavaScript从堆中分配该对象。且这个活跃对象并不会在函数返回时被自动销毁，它的生命周期与普通对象的垃圾回收机制类似，是根据引用数量决定的。")]),t._v(" "),e("p",[t._v("一个活跃对象包含：")]),t._v(" "),e("ul",[e("li",[t._v("对应函数对象的引用；")]),t._v(" "),e("li",[t._v("调用者对应的活跃对象，用于 return 之后的控制权转移；")]),t._v(" "),e("li",[t._v("调用完毕之后用于继续执行后续逻辑的恢复信息，它通常是一个将在函数调用完毕之后立即要执行的指令的地址；")]),t._v(" "),e("li",[t._v("函数对应的形参，从实参初始化而来；")]),t._v(" "),e("li",[t._v("函数中的变量，以 undefined 进行初始化；")]),t._v(" "),e("li",[t._v("函数用于计算复杂表达式的临时变量；")]),t._v(" "),e("li",[t._v("this，如果函数作为一个方法被调用，那么 this 通常就是它的宿主对象。")])]),t._v(" "),e("p",[t._v("其实 "),e("code",[t._v("ES5+")]),t._v(" 之后的广义“活跃对象”就是对于 "),e("code",[t._v("ES 1 / 3")]),t._v(" 定义的活跃对象的一个扩展，并将其应用到了词法环境中。 现如今的“活跃对象”是一个类似于活跃记录和栈帧的广义抽象概念。")]),t._v(" "),e("h2",{attrs:{id:"es的版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es的版本"}},[t._v("#")]),t._v(" ES的版本")]),t._v(" "),e("p",[t._v("ES1 / 3 / 5 / 6 / 2020")]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/372895529",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 中的活跃对象（AO）浅谈及导读"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMA-262-3 in detail. Chapter 2. Variable object."),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/justinw/archive/2010/04/23/1718733.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMA-262-3 深入解析.第二章.变量对象"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"http://dmitrysoshnikov.com/ecmascript/es5-chapter-3-2-lexical-environments-ecmascript-implementation/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMA-262-5 in detail. Chapter 3.2. Lexical environments: ECMAScript implementation."),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/szengtal/article/details/78726143",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMA-262-5 词法环境:ECMA实现（一）--- 简介"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);